version: '3.8'

# docker 및 redis 세팅 참고: https://github.com/geekceo/FastAPI-app-Redis-Docker

services:
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    restart: always
    env_file:
      - .env
    environment:
      - FLASK_DEBUG=1
#      - FLASK_APP=app.py
      - FLASK_APP=manage.py
      - FLASK_RUN_HOST=${APP_HOST}
      - FLASK_RUN_PORT=${APP_PORT}
      - SERVER_NAME=localhost:8000
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USE_TLS=${MAIL_USE_TLS}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    volumes:
      - .:/app
#      gunicorn -w 1 -b 0.0.0.0:8000 app:app
    command: bash -c "
      flask run
      "
    ports:
      - "8000:8000"
    depends_on:
      - redis
    networks:
      - network1

  app-worker:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    restart: always
    env_file:
      - .env
    environment:
      - FLASK_DEBUG=1
      - FLASK_APP=manage.py
      - FLASK_RUN_HOST=${APP_HOST}
      - FLASK_RUN_PORT=${APP_PORT}
      - SERVER_NAME=localhost:8000
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USE_TLS=${MAIL_USE_TLS}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    volumes:
      - .:/app
#      rq worker test-queue -u redis://redis:6379
#    rq worker -u 'redis://$REDIS_HOST:$REDIS_PORT' => enqueue_call()에서 retry=Retry()사용후부터는 --with-scheduler 명령어를 사용해야됨.
#      rq worker task -u 'redis://$REDIS_HOST:$REDIS_PORT' --with-scheduler
#      rq worker -u 'redis://$REDIS_HOST:$REDIS_PORT' --job-class=app.tasks.worker.Job --worker-class=app.tasks.worker.Worker --with-scheduler
#      rq worker -u 'redis://$REDIS_HOST:$REDIS_PORT' --with-scheduler
    command: bash -c "
      rq worker default high low -u 'redis://$REDIS_HOST:$REDIS_PORT' --with-scheduler
      "
    depends_on:
      - redis
    networks:
      - network1

  redis:
    container_name: redis
    build:
      context: .
      dockerfile: docker/redis/Dockerfile
    env_file:
      - .env
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    ports:
      - "6379:6379"
    networks:
      - network1

  rq_dashboard:
    container_name: rq-dashboard
    build:
      context: .
      dockerfile: docker/rq-dashboard/Dockerfile
    env_file:
      - .env
    environment:
      - RQ_DASHBOARD_REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}
    depends_on:
      - redis
    ports:
      - "9181:9181"
    networks:
      - network1


  app-scheduler:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    restart: always
    env_file:
      - .env
    environment:
      - FLASK_DEBUG=1
      - FLASK_APP=manage.py
      - FLASK_RUN_HOST=${APP_HOST}
      - FLASK_RUN_PORT=${APP_PORT}
      - SERVER_NAME=localhost:8000
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USE_TLS=${MAIL_USE_TLS}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    volumes:
      - .:/app
    command: bash -c "
      rqscheduler -u 'redis://$REDIS_HOST:$REDIS_PORT'  -v
      "
    depends_on:
      - redis
    networks:
      - network1

networks:
  network1:
    name: rq_network